#version 330

uniform samplerCube cube_texture;
uniform float f = 0.05;
uniform float power = 2.0;
uniform float bias = 0.3;
uniform float scale = 2.0;
uniform float eta = 0.66;

in vec3 n_eye;
in vec3 pos_eye;

out vec4 FragColor;

void main() {

  // normalize vectors
  vec3 n = normalize(n_eye);
  vec3 e = normalize(pos_eye);

  // compute reflection vector
  vec3 trefl = reflect(e, n);

  // compute refraction vector
  vec3 trefrRED = refract(e, n, eta);
  vec3 trefrGREEN = refract(e, n, eta + 0.01);
  vec3 trefrBLUE = refract(e, n, eta + 0.02);

  // access cube map texture
  vec3 refl = vec3(texture(cube_texture, trefl));
  vec3 refr;

  refr.r = texture(cube_texture, trefrRED).r;
  refr.g = texture(cube_texture, trefrGREEN).g;
  refr.b = texture(cube_texture, trefrBLUE).b;

  // simple version
  float fresnelApprox = 1 - pow(dot(-e,n), power);

  // schlick approximation
  float f = ((1.0 - eta) * (1.0 - eta)) / ((1.0 + eta) * (1.0 + eta));
  float schlick = f + (1 - f) * pow(1 - dot(-e,n), power);

  // cgTut empirical approximation
  float R = max(0, min(1, bias + scale * pow(1.0 - dot(n,-e), power)));
  FragColor = vec4(mix(refr, refl, R), 1);
}