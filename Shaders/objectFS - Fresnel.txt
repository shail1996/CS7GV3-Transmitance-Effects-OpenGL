#version 330

uniform samplerCube texUnit;
uniform float f = 0.05;
uniform float power = 2.0;
uniform float bias = 0.3;
uniform float scale = 2.0;
uniform float eta = 0.66;

in vec3 n_eye;
in vec3 pos_eye;

out vec4 FragColor;

void main() {
  // normalize vectors
  vec3 n = normalize(n_eye);
  vec3 e = normalize(pos_eye);
  // compute reflection vector
  vec3 trefl = reflect(e, n);
  // compute refraction vector
  vec3 trefr = refract(e, n, eta);
  // access cube map texture
  vec3 refl = texture(texUnit, trefl).rgb;
  vec3 refr = texture(texUnit, trefr).rgb;
  // Schlick approximation
  float f = ((1.0 - eta) * (1.0 - eta)) /
  ((1.0 + eta) * (1.0 + eta));
  float schlick = f + (1 - f) * pow(1 + dot(-e,n), power);
  FragColor = vec4(mix(refr, refl, f), 1);
}